version: 0.2

env:
  variables:
    AWS_DEFAULT_REGION: ap-south-2
    CLUSTER_NAME: codepipeline-test
    SERVICE_NAME: todo-service
    IMAGE_REPO_NAME: three-tier
    CONTAINER_NAME: todo-container
    TASK_DEFINITION_FAMILY: todo-task
    SUBNETS: "subnet-083add9d53a052016"
    SECURITY_GROUP: "sg-0c9e4f3c7a6be673e"

phases:
  install:
    commands:
      - echo "üîß Checking for jq..."
      - jq --version || echo "jq is pre-installed"

  pre_build:
    commands:
      - echo "üîê Logging into ECR..."
      - ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
      - REPOSITORY_URI=$ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
      - IMAGE_TAG=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_URI=$REPOSITORY_URI:$IMAGE_TAG
      - |
        if ! aws ecr describe-repositories --repository-names $IMAGE_REPO_NAME >/dev/null 2>&1; then
          echo "‚û°Ô∏è  Creating ECR repo: $IMAGE_REPO_NAME"
          aws ecr create-repository --repository-name $IMAGE_REPO_NAME
        fi
      - aws ecr get-login-password | docker login --username AWS --password-stdin $REPOSITORY_URI

  build:
    commands:
      - echo "üê≥ Building Docker image..."
      - docker build -t $IMAGE_URI .
      - echo "üöÄ Pushing image to ECR..."
      - docker push $IMAGE_URI

  post_build:
    commands:
      - echo "üìÑ Creating ECS task definition..."
      - sed "s|<IMAGE_URI>|$IMAGE_URI|g" taskdef.json > new-taskdef.json
      - cat new-taskdef.json
      - jq . new-taskdef.json || { echo "‚ùå Invalid JSON"; exit 1; }
      - echo "üì¶ Registering task definition..."
      - TASK_REVISION=$(aws ecs register-task-definition --cli-input-json file://new-taskdef.json --query 'taskDefinition.revision' --output text)
      - |
        SERVICE_STATUS=$(aws ecs describe-services \
          --cluster $CLUSTER_NAME \
          --services $SERVICE_NAME \
          --query "services[0].status" \
          --output text 2>/dev/null || echo "MISSING")
      - |
        if [ "$SERVICE_STATUS" = "ACTIVE" ]; then
          echo "üåÄ Updating ECS service..."
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --task-definition $TASK_DEFINITION_FAMILY:$TASK_REVISION \
            --force-new-deployment
        else
          echo "üÜï Creating ECS service..."
          aws ecs create-service \
            --cluster $CLUSTER_NAME \
            --service-name $SERVICE_NAME \
            --task-definition $TASK_DEFINITION_FAMILY:$TASK_REVISION \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[$SUBNETS],securityGroups=[$SECURITY_GROUP],assignPublicIp=ENABLED}"
        fi

artifacts:
  files:
    - new-taskdef.json
