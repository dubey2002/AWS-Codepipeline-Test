version: 0.2

env:
  variables:
    AWS_DEFAULT_REGION: ap-south-2
    CLUSTER_NAME: codepipeline-test
    SERVICE_NAME: todo-service
    IMAGE_REPO_NAME: three-tier
    CONTAINER_NAME: todo-container
    TASK_DEFINITION_FAMILY: todo-task
    LOAD_BALANCER_NAME: todo-alb
    TARGET_GROUP_NAME: todo-target-group
    VPC_ID: vpc-0c6f6b98b166bd404
    SUBNETS: "subnet-083add9d53a052016,subnet-06e08945044b325a5"
    SECURITY_GROUP: "sg-0c9e4f3c7a6be673e"
    DOMAIN_NAME: example.com
    SUBDOMAIN: todo.example.com
    ALB_ZONE_ID: ZP97RAFLXTNZK  # ALB Hosted Zone ID for ap-south-2

phases:
  install:
    commands:
      - echo "üîß Installing required tools..."
      - jq --version || echo "jq already installed"

  pre_build:
    commands:
      - echo "üîê Authenticating with ECR..."
      - |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          REPOSITORY_URI=$ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
          IMAGE_TAG=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
          IMAGE_URI=$REPOSITORY_URI:$IMAGE_TAG
          export REPOSITORY_URI IMAGE_TAG IMAGE_URI

      - echo "üì¶ Checking ECR repo..."
      - |
          if ! aws ecr describe-repositories --repository-names $IMAGE_REPO_NAME > /dev/null 2>&1; then
            aws ecr create-repository --repository-name $IMAGE_REPO_NAME
          fi

      - echo "üîê Logging into ECR..."
      - |
          aws ecr get-login-password | docker login --username AWS --password-stdin $REPOSITORY_URI

      - echo "üéØ Checking target group..."
      - |
          TG_ARN=$(aws elbv2 describe-target-groups \
            --names $TARGET_GROUP_NAME \
            --query 'TargetGroups[0].TargetGroupArn' \
            --output text 2>/dev/null || echo "MISSING")

          if [ "$TG_ARN" = "MISSING" ]; then
            TG_ARN=$(aws elbv2 create-target-group \
              --name $TARGET_GROUP_NAME \
              --protocol HTTP \
              --port 80 \
              --vpc-id $VPC_ID \
              --target-type ip \
              --query 'TargetGroups[0].TargetGroupArn' \
              --output text)
          fi

          export TARGET_GROUP_ARN=$TG_ARN

      - echo "üåê Checking load balancer..."
      - |
          LB_ARN=$(aws elbv2 describe-load-balancers \
            --names $LOAD_BALANCER_NAME \
            --query 'LoadBalancers[0].LoadBalancerArn' \
            --output text 2>/dev/null || echo "MISSING")

          if [ "$LB_ARN" = "MISSING" ]; then
            LB_ARN=$(aws elbv2 create-load-balancer \
              --name $LOAD_BALANCER_NAME \
              --subnets $(echo $SUBNETS | tr "," " ") \
              --security-groups $SECURITY_GROUP \
              --scheme internet-facing \
              --type application \
              --ip-address-type ipv4 \
              --query 'LoadBalancers[0].LoadBalancerArn' \
              --output text)

            aws elbv2 wait load-balancer-available --load-balancer-arns $LB_ARN

            aws elbv2 create-listener \
              --load-balancer-arn $LB_ARN \
              --protocol HTTP \
              --port 80 \
              --default-actions Type=forward,TargetGroupArn=$TG_ARN
          fi

          export LOAD_BALANCER_ARN=$LB_ARN

  build:
    commands:
      - echo "üê≥ Building Docker image..."
      - docker build -t $IMAGE_URI .
      - echo "üì§ Pushing image to ECR..."
      - docker push $IMAGE_URI

  post_build:
    commands:
      - echo "üìÑ Preparing ECS task definition..."
      - sed "s|<IMAGE_URI>|$IMAGE_URI|g" taskdef.json > new-taskdef.json
      - jq . new-taskdef.json || { echo "‚ùå Invalid taskdef JSON"; exit 1; }

      - echo "üì¶ Registering task definition..."
      - |
          TASK_REVISION=$(aws ecs register-task-definition \
            --cli-input-json file://new-taskdef.json \
            --query 'taskDefinition.revision' --output text)
          echo "üÜï Task revision: $TASK_REVISION"

      - echo "üîÑ Creating or updating ECS service..."
      - |
          SERVICE_STATUS=$(aws ecs describe-services \
            --cluster $CLUSTER_NAME \
            --services $SERVICE_NAME \
            --query "services[0].status" \
            --output text 2>/dev/null || echo "MISSING")

          if [ "$SERVICE_STATUS" = "ACTIVE" ]; then
            aws ecs update-service \
              --cluster $CLUSTER_NAME \
              --service $SERVICE_NAME \
              --task-definition $TASK_DEFINITION_FAMILY:$TASK_REVISION \
              --force-new-deployment \
              --load-balancers "targetGroupArn=$TARGET_GROUP_ARN,containerName=$CONTAINER_NAME,containerPort=80"
          else
            aws ecs create-service \
              --cluster $CLUSTER_NAME \
              --service-name $SERVICE_NAME \
              --task-definition $TASK_DEFINITION_FAMILY:$TASK_REVISION \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[$SUBNETS],securityGroups=[$SECURITY_GROUP],assignPublicIp=ENABLED}" \
              --load-balancers "targetGroupArn=$TARGET_GROUP_ARN,containerName=$CONTAINER_NAME,containerPort=80"
          fi

      - echo "üåç Configuring Route 53 record for $SUBDOMAIN"
      - |
          ALB_DNS=$(aws elbv2 describe-load-balancers \
            --names $LOAD_BALANCER_NAME \
            --query 'LoadBalancers[0].DNSName' \
            --output text)

          HOSTED_ZONE_ID=$(aws route53 list-hosted-zones-by-name \
            --dns-name $DOMAIN_NAME. \
            --query 'HostedZones[0].Id' --output text | sed 's|/hostedzone/||')

          cat > r53.json <<EOF
          {
            "Comment": "Map subdomain to ALB",
            "Changes": [{
              "Action": "UPSERT",
              "ResourceRecordSet": {
                "Name": "$SUBDOMAIN",
                "Type": "A",
                "AliasTarget": {
                  "HostedZoneId": "$ALB_ZONE_ID",
                  "DNSName": "$ALB_DNS",
                  "EvaluateTargetHealth": false
                }
              }
            }]
          }
EOF

          aws route53 change-resource-record-sets \
            --hosted-zone-id $HOSTED_ZONE_ID \
            --change-batch file://r53.json

      - echo "‚úÖ Subdomain $SUBDOMAIN is now mapped to ALB."

artifacts:
  files:
    - new-taskdef.json
